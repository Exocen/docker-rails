#!/bin/bash
# Enviroment variables:
#   APP_NAME: The app name
#   APP_REPO_URL: The git repo where to clone the app, e.g. https://<token>@github.com/owner/repo.git
#   APP_REPO_REF: The ref (branch or tag), defaults to master
#   RAILS_ENV: The Rails environment, e.g. "test" (optional, default: production)
#   DATABASE_URL: e.g. "postgres://myuser:mypass@localhost/somedatabase"

trap 'exit' ERR

executeHook() {
  if [ -d ./deploy ]; then
      find ./deploy -type f -iname "$1.rb" -exec ruby {} \;
          find ./deploy -type f -iname "$1.sh" -exec sh {} \;
	    fi
	    }

source /etc/profile.d/rvm.sh

rvm install ruby-2.3.0
rvm use --default ruby-2.3.0

# Clone/pull your repo and remove DB config, if found
if [ ! -d "~/$APP_NAME/.git" ]; then
  git clone --depth 1 --branch $APP_REPO_REF $APP_REPO_URL ~/$APP_NAME
  else
    git -C ~/$APP_NAME checkout $APP_REPO_REF
      git -C ~/$APP_NAME pull
      fi

export SECRET_KEY_BASE=$(RAILS_ENV=production rake secret)

# Change to app dir and adapt Ruby settings from .ruby-version and .ruby-gemset
rvm_install_on_use_flag=1 cd ~/$APP_NAME

# Install bundler, if not yet present
if ! gem spec bundler > /dev/null 2>&1; then
  gem install bundler
  fi

#rm -f config/database.yml

executeHook before_bundle

# Install Gems. Install Passenger, if not yet present
bundle install --without "test development" --quiet

executeHook after_bundle

if ! gem spec passenger > /dev/null 2>&1; then
  gem install passenger
  fi

# Create, migrate DB and precompile assets
if rake db:version | grep ": 0$"; then
  rake db:setup
  else
    rake db:migrate
    fi
    rake assets:precompile

executeHook before_start

# Start web server (Passenger in Standalone mode)
passenger start -p 80 -e $RAILS_ENV
